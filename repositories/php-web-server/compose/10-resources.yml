version: "2"
services:
  cgi_server:
    depends_on:
    - minio
    - mysql
    - rabbitmq
    - redis

  task_scheduler:
    depends_on:
    - minio
    - mysql
    - rabbitmq
    - redis

  example_worker:
    depends_on:
    - minio
    - mysql
    - rabbitmq
    - redis

  minio:
    image: minio/minio:latest
    command: ["minio", "server", "/data"]
    restart: on-failure
    environment:
    - MINIO_ACCESS_KEY=${BACKING_SERVICES_USER}
    - MINIO_SECRET_KEY=${MINIO_PASSWORD}
    volumes:
    - minio_data:/data
    labels:
    - version=${DOCKER_IMAGE_VERSION}

  minio_constructor:
    depends_on:
    - minio
    image: minio/mc:latest
    entrypoint: >
      sh -c "
        /usr/bin/mc config host add myminioserver http://minio:9000 '${BACKING_SERVICES_USER}' '${MINIO_PASSWORD}';
        /usr/bin/mc mb myminioserver/myminiobucket;
        /usr/bin/mc policy download myminioserver/myminiobucket;
        exit 0
      "
    restart: on-failure
    labels:
    - version=${DOCKER_IMAGE_VERSION}

  mysql:
    image: mysql:5
    restart: on-failure
    environment:
    - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
    - MYSQL_USER=${BACKING_SERVICES_USER}
    - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    - MYSQL_DATABASE=db0
    volumes:
    - mysql_data:/var/lib/mysql
    labels:
    - version=${DOCKER_IMAGE_VERSION}

  rabbitmq:
    image: rabbitmq:latest
    restart: on-failure
    environment:
    - RABBITMQ_DEFAULT_USER=${BACKING_SERVICES_USER}
    - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq
    labels:
    - version=${DOCKER_IMAGE_VERSION}

  redis:
    image: redis:latest
    command: ["--requirepass", "${REDIS_PASSWORD}"]
    restart: on-failure
    volumes:
    - redis_data:/data
    labels:
    - version=${DOCKER_IMAGE_VERSION}

volumes:
  minio_data:
    driver: local

  mysql_data:
    driver: local

  rabbitmq_data:
    driver: local

  redis_data:
    driver: local
